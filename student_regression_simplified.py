# -*- coding: utf-8 -*-
"""student_regression_simplified.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T4hSNN3S6O0LtkmJZOjPThpugUwm6XzN
"""

!pip install numpy
!pip install pandas
!pip install scikit-learn
!pip install streamlit

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

!wget --no-check-certificate 'https://drive.google.com/uc?export=download&id=1E4RE3vXcz9OqCMn_1H_JfkK1Bzbp_eN5' -O data.csv

df = pd.read_csv('data.csv')
print(df.head(2))

X_single = df[['amenities']]
y_single = df['price_in_dollar']

x_train_single, x_test_single, y_train_single, y_test_single = train_test_split(
    X_single, y_single,
    test_size=0.2,
    random_state=42)

lr_single = LinearRegression()
#train the model
lr_single.fit(x_train_single, y_train_single)
#predict
y_pred_single = lr_single.predict(x_test_single)

r2_single = r2_score(y_test_single, y_pred_single)
print(r2_single)
print(lr_single.intercept_)
print(lr_single.coef_)

"""y = b0 + b1x
price_in_dollar = -18.0 + 9.9 amenities
"""

model = lr_single

example = [20]
model.predict([example]).round(2)

import plotly.express as px
import plotly.graph_objects as go
import numpy as np

# Suppose df is your full DataFrame
# Define x_val and y_val to refer to the columns you want
x_val = df[['amenities']]             # a DataFrame with one column
y_val = df[['price_in_dollar']]       # also a DataFrame/Series

# Now, create updatedX and predicted y based on your model (e.g., lr_single)
updatedX = np.array(x_val['amenities'])
y_predict = lr_single.predict(x_val)  # call predict on the same shape as training

# Create your reference line
reference_line = go.Scatter(
    x=updatedX,
    y=y_predict,
    mode="lines",
    line=go.scatter.Line(color="gray"),
    showlegend=False
)

# Create a scatter plot of the actual data
fig = px.scatter(
    x=x_val['amenities'],
    y=y_val['price_in_dollar']
)

# Add your reference (predicted) line to the plot
fig.add_trace(reference_line)

# Display
fig.show()

import pickle

pickle.dump(model, open("model.pkl", "wb"))

from google.colab import files

# Download the file locally
files.download('model.pkl')

# Commented out IPython magic to ensure Python compatibility.
# %%writefile streamlit_app.py
# import streamlit as st
# import sklearn
# import pickle
# 
# model = pickle.load(open("model.pkl", "rb"))
# 
# st.title("The Airbnb dataset")
# st.markdown(
#     "The dataset contains modifications with regards to the original for illustrative & learning purposes"
# )
# 
# amenities = st.slider('How many amenities does the listing have?', 0, 50, 20)
# #accommodates = st.slider('How many people does the listing accommodate?', 1, 16, 2)
# #instant_bookable = st.radio(
#     #"Is the listing instantly bookable?",
#     #("True", "False"))
# #instant_bookable = 1 if instant_bookable == "True" else 0
# 
# user_input = [[amenities]]#, accommodates, instant_bookable]]
# 
# if st.button('Predict?'):
#     st.write("The model predicts that the average tip for this listing is:", model.predict(user_input).round(2))

# Commented out IPython magic to ensure Python compatibility.
# %%writefile requirements.txt
# pandas
# streamlit
# plotly
# numpy
# scikit-learn

from google.colab import files

# Download the file locally
files.download('requirements.txt')

from google.colab import files

# Download the file locally
files.download('streamlit_app.py')

df.info()

X_multi = df[['amenities','accommodates','instant_bookable']]
y_multi = df['price_in_dollar']

x_train_multi, x_test_multi, y_train_multi, y_test_multi = train_test_split(
    X_multi, y_multi,
    test_size=0.2,
    random_state=42)

x_train_multi.shape,x_test_multi.shape

lr_multi = LinearRegression()
#train the model
lr_multi.fit(x_train_multi, y_train_multi)
#predict
y_pred_multi = lr_multi.predict(x_test_multi)
r2_multi = r2_score(y_test_multi, y_pred_multi)
print(r2_multi)
print(lr_multi.intercept_)
print(lr_multi.coef_)

model = lr_multi
example = [[30,4,1]]
model.predict(example).round(2)